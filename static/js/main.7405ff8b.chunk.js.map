{"version":3,"sources":["components/CounterButton.js","components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["CounterButton","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCount","setState","state","count","nextProps","nextState","console","log","react_default","a","createElement","color","props","onClick","Component","Header","className","components_CounterButton","Card","_ref","id","name","email","alt","src","concat","CardList","robots","map","user","components_Card","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","hasError","error","info","App","onRequestRobots","_this$props","isPending","searchField","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.7405ff8b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass CounterButton extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        // only update this component IF this.state.count has changed\r\n        if (this.state.count !== nextState.count) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return {\r\n                count: this.state.count + 1\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        console.log(`CounterButton`)\r\n        return (\r\n            <button\r\n                color={this.props.color}\r\n                onClick={this.updateCount}\r\n            >\r\n                Count: { this.state.count }\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CounterButton","import React, { Component } from 'react'\r\nimport CounterButton from './CounterButton'\r\n\r\nclass Header extends Component {\r\n    \r\n    render() {\r\n        console.log(`Header`)\r\n        return (\r\n            <div>\r\n                <h1 className=\"f1\">RoboFriends</h1>\r\n                <CounterButton color={`red`}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React from \"react\"\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img\r\n                alt=\"robot\"\r\n                src={`https://robohash.org/${ id }?size=200x200`}\r\n            />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import React from \"react\"\r\nimport Card from \"./Card\"\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    if (0) {\r\n        // simulate an error\r\n        throw new Error(\"Random error!!!!\")\r\n    }\r\n    \r\n    console.log(`CardList`)\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map(user => {\r\n                    return (\r\n                        <Card\r\n                            key={user.id}\r\n                            id={user.id}\r\n                            name={user.name}\r\n                            email={user.email}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList","import React from 'react'\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    console.log(`SearchBox`)\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                aria-label='Search Robots'\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox","import React from \"react\"\r\n\r\nconst Scroll = props => {\r\n    \r\n    return (\r\n\r\n        <div style={{\r\n            overflowY: \"scroll\",\r\n            border: \"5px solid black\",\r\n            height: \"700px\"\r\n        }}>\r\n            { props.children }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll","import React, { Component } from \"react\"\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    // This Lifecycle Hook will catch errors\r\n    componentDidCatch(error, info) {\r\n        this.setState({\r\n            hasError: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return (\r\n                <h1>Error!</h1>\r\n            )\r\n        } else {\r\n            return this.props.children\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n    setSearchField,\r\n    requestRobots\r\n} from '../actions'\r\n\r\nimport Header from '../components/Header'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\n\r\nimport './App.css'\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n})\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n\r\n        this.props.onRequestRobots()\r\n    }\r\n\r\n    render() {\r\n\r\n        const { robots, isPending, searchField, onSearchChange } = this.props\r\n\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n\r\n        if (isPending) {\r\n\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1 className=\"f1\">Loading...</h1>\r\n                </div>\r\n            )\r\n        } else {\r\n\r\n            return (\r\n                <div className=\"tc\">\r\n                    <Header />\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constants\"\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({\r\n        type: REQUEST_ROBOTS_PENDING\r\n    })\r\n\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n        .then(response => response.json())\r\n        .then(data => dispatch({\r\n            type: REQUEST_ROBOTS_SUCCESS,\r\n            payload: data\r\n        }))\r\n        .catch(error => dispatch({\r\n            type: REQUEST_ROBOTS_FAILED,\r\n            payload: error\r\n        }))\r\n}\r\n\r\n","export const CHANGE_SEARCH_FIELD = `CHANGE_SEARCH_FIELD`\r\n\r\nexport const REQUEST_ROBOTS_PENDING = `REQUEST_ROBOTS_PENDING`\r\nexport const REQUEST_ROBOTS_SUCCESS = `REQUEST_ROBOTS_SUCCESS`\r\nexport const REQUEST_ROBOTS_FAILED = `REQUEST_ROBOTS_FAILED`","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_SUCCESS\r\n} from \"./constants\"\r\n\r\n\r\nconst initialStateSearch = {\r\n    searchField: ``\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {\r\n                searchField: action.payload\r\n            })\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ``\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {\r\n                isPending: true\r\n            })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {\r\n                robots: action.payload,\r\n                isPending: false\r\n            })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {\r\n                error: action.payload,\r\n                isPending: false\r\n            })\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from \"react-redux\"\nimport { createStore, combineReducers, applyMiddleware } from \"redux\" \n//import { createLogger } from \"redux-logger\"\nimport thunkMiddleware from \"redux-thunk\"\nimport './index.css'\nimport App from \"./containers/App\"\nimport * as serviceWorker from './serviceWorker'\nimport { searchRobots, requestRobots } from \"./reducers\"\nimport \"tachyons\"\n\n\n//const logger = createLogger()\n\nconst rootReducer = combineReducers({\n    searchRobots,\n    requestRobots\n})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware/*, logger*/))\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}